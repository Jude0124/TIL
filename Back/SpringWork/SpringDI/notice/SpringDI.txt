SpringDI

- sample1 : DI 개념을 이해한다.
			is ~a 관계를 이용한 구도를 학습한다.
			springbeans를 이용한 설정을 구현한다.
			설정파일을 객체로 연동해서 호출한 구문을 확인한다.
			
- sample2 : 	has ~a 관계를 이용한 DI를 구현한다.
		   	setter Inject 를 구현해보자.
		 	https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-definition
			spring은 beans객체를 싱글톤으로 메모리 로드 한다음 binding시킨다.
				ex)	Calendar rightNow = Calendar.getInstance();
				ex) Runtime res = Runtime.getRuntime();
			   생성자를 private로 지정해도 문제 없다.

- sample3 :	java.util.* 클래스를 생성자 혹은 setter inject하는 방법을 구현할 수 있다.
		 	값전달을 <bean />으로 지정할 수 있다.
		 	has ~ a 관계, is ~ a 관계를 살펴보고 객체를 메모리 로드를 싱글톤으로 지정하는
		 	applicationContext의 원형을 이해할 수 있다.

- sample4 : 추상 클래스의 패턴과 싱글톤 패턴을 이해하고 구현한다.	[$1.3.2]

			싱글톤 (Singleton Pattern) : static method 와 private 생성자를 만들어서
			단 하나의 인스턴스르 연동할 수 있도록 구현하는 패턴 
			ex)
				class Test{
						private Test(){}
						public static Test getInc(){ return new Test();}
						}
							Test t1 = Test.getInc(); -> 싱글톤
			
			싱글톤 레지스트리 (Singleton) : 스프링에서 직접 싱글톤 형태의 오브젝트를 만들고
				관리하는 기능을 제공하는 것, 스프링은 빈즈 오브젝트는 내부적으로 싱글톤 레지스트리를
				만들어서 제공한다. 
				
-sample  5: lazy-init 사용  , 
    ex) depends-on  ="참조되는 객체의 id"(sample2/appclicationContext2.xml) 
           
lazy-init :

빈 팩토리를 이용해서 스프링에서 설정을  하고 난 후  객체를 id로 getBean()로
   호출을 하게 되면 메모리에  올려진 객체들이 선언된 순서대로 생성된 것을 확인 할 수 있다. 
   기본적으로 스프링 컨테이너가 시작할 때 싱글톤에 의해 bean에 대해 모든 인스턴스화 된다.
   만일 특정 싱글톤유형에 대한 bean을 컨테이너가 시작할 때 인스턴스화 시키지 않고 
   해당 bean을 사용하고자 하는 시점에 인스턴스화 하고 싶을 때 사용하는  속성 키워드가 lazy-init
   이다.     
   
 depends-on :  bean이 초기화 되기 전에 먼저 초기화 되는 키워드     
               -특정 bean이 초기화 되기 전에 초기화 되어야 하는 bean을 명시적으로 선언 
               - 생성자와 setter 메소드로 값을 전달 하기 이전에 메모리에 생성되는 
                 객체가 정의 되어  메모리 체크를 할때 많이 사용되는 키워드이다.  
                - 미리 서버를 구동 시켜 놓고 특정 리소스에 대한 작업을 체크할 때 사용된다.                  
              [NoSuchBeanDefinitionException]
						
-sample6 : workshop

-sample7 : abstract = "true" 일반 클래스를 추상클래스로 선언하는 기능
		   merge = "true" collections를 병합하는 키워드

-sample8 :		p: 속성값을 이용해서 Inject를 구현해 보자.

-sample9 : autowire 속성

	1. byname : 참조 변수와 이름이 같은 해당 객체의 메소드가 있을 때 자동할당
	
	2. byType : 참조변수의 type과 같은 메소드의 param이 선언되어 있으면 자동 할당
	
	3. constructor :  byType과 같은 내용을 생성자를 통해서 같은 type으로 있으면 할당
	
	4. autodetect : 생성자에 할당한 type이 있는지 먼저 확인을 한 후, 없으면
					메소드에서 type이 있는지를 확인하여 할당
					실제 클래스에서 @autowired라는 옵션으로 사용된다.
					
-sample10 :  spring2.5 / spring 3.0 / spring 4.0 (jdk 8)
			 spring		 +db
		
		1. spring + jdbc[java] java.sql -DAO
		
		2. spring + jdbc[datasource] javax.sql - DAO ( class="org.apache.commons.dbcp.BasicDataSource" (WAS),
												   org.springframework.jdbc.datasource.SimpleDriverDataSource)
		
		spring 4.0
		
		3. springJDBC : org.springframework.jdbd.datasource.SimpleDriverDataSource	
		 - springJDBC(DAO)
		
		4. spring + ORM (object - relational mapping)
					ibatis(ver 2.0 , 3.0) , mybatis(5.0) / Hivernate[s]
					.xml로 쿼리를 작성한 파일을 객체로 맵핑하는 것.
					
		5. spring(ver 5.0) + JSR + JPA
		
-sample11 : 
 @Configuration
		sample10을 환경설정을 .xml을 .java로 연동하는 방법
		
		
	
	
						