Spring annotation
    어노테이션은 자바1.5부터 지원한다
    스프링은 어노테이션을 이용하여 빈과 관련된 정보를 설정할수 있다.

    스프링 프레임워크를 이용하여 구현할 때 annotation 구문을 사용하여 구현하려면 다음 설정들을 필요로 한다. 
    현재는 주로 2번과 3번을 사용한다.
	1. CommonAnnotationBeanPostProcessor 클래스를 설정파일에 빈객체로 등록하여 어노테이션을 적용시킨다.
      	  <bean class="org.springframework.beans.factory.annotation.CommonAnnotationBeanPostProcessor"/>
	2. <context:annotation-config> 태그를 이용한다.
	3. <context:component-scan base-package="xxx" /> 태그를 이용한다.

   spring web mvc Framework는 java 5+ 부터 annotaion을 제공 하며, annotation의 사용으로 설정파일을 간결화하고,
   view 페이지와 객체 또는 메소드의 맵핑을 명확하게 할 수 있다.
   - 4개의 스테레오타입 어노테이션
     @Component : 스테레오타입 어노테이션의 조상
     @Controller : Spring MVC에서 컨트롤러로 인식
     @Service : 역할 부여 없이 스캔 대상이 되는데 비즈니스 클래스에 사용
     @Repository : 레포지 토리 어노테이션은 일반적으로 DAO에 사용되며 DB Exception을 DataAccessException으로 변환

   ο @Required
      패키지 : org.springframework.beans.factory.annotaion
      버전 : spring 2.0
      리콰이얼드 어노테이션은 필수 프로퍼티임을 명시하는 것으로 아래와 같이 set 메소드에 붙이면 된다. 
      필수 프로퍼티를 설정하지 않을 경우 빈 생성시 예외를 발생시킨다.
     - 1단계 : 코드내에 프로퍼티 설정 메소드에 @Required 어노테이션을 붙인다.
     import org.springframework.beans.factory.annotation.Required
     public class TestBean {
     @Required
         private TestDao testDao;         
     }
   ο @Repository
      패키지 : org.springframework.stereotype
      버전 : spring 2.0
      레포지토리 어노테이션은 일반적으로 DAO에 사용되며 DB Exception을 DataAccessException으로 변환한다.

   ο @Autowired
      패키지 : org.springframework.beans.factory.annotaion
      버전 : spring 2.5
       오토 와이어링 어노테이션은 Spring에서 의존관계를 자동으로 설정할때 사용된다. 
       이 어노테이션은 생성자, 필드, 메소드 세곳에 적용이 가능하며, 타입을 이용한 프로퍼티 자동 설정기능을 제공한다. 
       즉, 해당 타입의 빈 객체가 없거나 2개이상일경우 예외를 발생시킨다
       프로퍼티 설정 메소드(ex: setXXX()) 형식이 아닌 일반메소드에도 적용가능하다.
       프로퍼티설정이 필수가 아닐경우 @Autowired(required=false)로 선언한다. (기본값은 true)
       byType으로 의존관계를 자동으로 설정할 경우 같은 타입의 빈이 2개 이상 존재하게 되면 예외가 발생하는데, 
       Autowired도 이러한 문제가 발생한다. 
       이럴 때 @Qualifier를 사용하면 동일한 타입의 빈 중 특정 빈을 사용하도록 하여 문제를 해결할 수 있다.
       ex)
       @Autowired
       @Qualifier("test")
       private Test test;
       
   ο @Qualifier
      패키지 : org.springframework.beans.factory.annotaion
      버전 : spring 2.5
       @Autowired이 타입기반이기 때문에 2개이상의 동일타입 빈 객체중 특정빈을 사용하도록 선언한다.
       @Qualifier("mainBean")의 형태로 @Autowired와 같이 사용하며 해당 <bean>태그에 
       <qualifire value="mainBean" /> 태그를 선언해주어야 한다.
       Method에서 두개이상의 파라미터를 사용할 경우는 파라미터 앞에 선언해야한다.

   ο @Component
      패키지 : org.springframework.stereotype
      버전 : spring 2.5
      클래스에 선언하며 해당 클래스를 자동으로 bean으로 등록한다.
      bean의 이름은 해당클래스명(첫글자는 소문자)이 사용된다.
      범위는 디폴트로 singleton이며 @Scope를 사용하여 지정할 수 있다.

   ο @Service
      @Service를 적용한 Class는 비지니스 로직이 들어가는 Service로 등록이 된다.
      Controller에 있는 @Autowired는 @Service("xxxService")에 등록된 xxxService와 변수명이 같아야 하며
      Service에 있는 @Autowired는 @Repository("xxxDao")에 등로된 xxDao와 변수명이 같아야 한다.

      @Service("helloService")
      public class HelloServiceImpl implements HelloService {
      @Autowired
      private HelloDao helloDao;
           public void hello() {
  		System.out.println("HelloServiceImpl :: hello()");
  		helloDao.selectHello();
     	  }
      }
      helloDao.selectHello(); 와 같이 @Autowired를 이용한 객체를 이용하여 Dao 객체를 호출한다.

   ο @Resource
      자바 6버전 및 JEE5 버전에 추가된 것으로 어플리케이션에서 필요로 하는 자원을 자동 연결할 때 사용 한다. 
      스프링 2.5 부터 지원하는 어노테이션으로 스프링에서는 의존하는 빈 객체를 전달할 때 사용하다.
      name속성에 자동으로 연결될 빈객체의 이름을 입력한다.
      @Resource(name="testDao")

   ο @Controller
      패키지 : org.springframework.stereotype
      버전 : spring 2.5
      spring MVC의 Controller 클래스 선언을 단순화시켜준다. 스프링 컨트롤러, 서블릿을 상속할 필요가 없으며,
     @Controller로 등록된 클래스 파일에 대한 bean을 자동으로 생성해준다.   
     Controller로 사용하고자 하는 클래스에 @Controller 지정해 주면 component-scan으로 자동 등록된다.

   ο @RequestMapping
      RequestMapping annotation은 url을 class 또는 method와 mapping 시켜주는 역할을 한다.
      annotation을 쓰지 않을 때 지정했던 Controller등록을 위한 url bean 설정을 생략 할 수 있다.
       @Controller
       @RequestMapping("/han/test/*")
       public class helloController{
           @RequestMapping(method=RequestMethod.GET, value="go")
           public returntype getMethodName(){
               :
           }
           @RequestMapping(method=RequestMethod.POST, value="go2")
           public returntype getMethodName2(){
                :
           }  
       }

   ο @RequestParam
      RequestParam annotation은 key=value 형태로 화면에서 넘어오는 파라미터를 맵핑 된 메소드의 파라미터로 지정해 준다.
      주로get방식으로 들어오는 request에서 사용한다.
      아래 예제코드에서 xxx/editBlog.do?blogId=3 과 같이 접근할 때, editBlogHandler 메소드의 파라미터인 blogId에는 3이 셋팅된다. 
      필수 요건이 아닐 경우, @RequestParam(value="id", required="false")와 같이 옵션을 주고 사용할 수 있다. 

      @Controller
      public class BlogController {
              /* 중간생략 */
   	@RequestMapping("/editBlog")
 	public ModelMap editBlogHandler(@RequestParam("blogId") int blogId) {
  		blog = blogService.findBlog(blogId); 
  		return new ModelMap(blog);
 	}
             /* 중간생략 */
     }

   ο @ModelAttribute
      ModelAttribute annotation은 화면의 form 속성으로 넘어온 model을 맵핑된 method의 파라미터로 지정해주는 역활을 한다.
      주로POST 타입으로 넘어오는 form 속성의 model 값을 받아 올 때 사용된다.(get/post 모두 통용된다.)

   ο @SessionAttributes
      SessionAttribute annotation은 세션상에서 model의 정보를 유지하고 싶을 경우 사용 할 수 있다.

   ο @PostConstruct, @PreDestroy
      패키지 : javax.annotation
      버전 : jdk1.6, spring 2.5
      객체를 생성한 이후와 소멸되기 전에 호출할 메소드를 지정한다.

