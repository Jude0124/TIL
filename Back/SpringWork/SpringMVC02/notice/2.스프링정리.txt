주말 Spring&Struts (15:00 - 20:00
김계희 : jenni7@naver.com (010-2267-1220)

mgr.eduitbank.com   --수강동의
강사PC : \\121.160.70.75\\WeekSpring
저녁시간 : 6:00-6:30

1주차 : Spring셋팅 , 스프링의 개요 , DI, AOP
2주차 : JDBC, iBatis (or  MyBatis) 연동, 
3주차 : Web MVC  / Struts 셋팅
4주차 : Struts
=======================================================================
[1] 스프링 셋팅방법-1
 http://spring.io 에서 다운로드
     PROJECTS ->  SPRING FRAMEWORK -> TOOLS -> DOWNLOAD STS(3.3.0.RELEASE for Windows)
--------------------------------------------------------------------------------------------------------------------------
[2] 스프링 셋팅방법-2
(1) www.eclipse.org에서  Kepler버젼을 다운로드한후 설치
(2) 이클립스실행한후 Help -> Eclipse Marketplace -> Search탭에서 STS검색
      -> Spring Tool Suitr(STS) for Eclopse Kepler(4.3) 3.4.0.RELEASE -> install

[3]라이브러리추가
window -> preference -> java -> Build Path -> User Libraries -> New -> springLIB만들어서추가   

[4] sts(Spring Tool Suite)에서 의존성 추가 
http://search.maven.org    or  http://mvnrepository.com

eclipse의 pom.xml 파일에서 
pom.xml탭을 클릭 <dependency></dependency>추가
ex) Group Id : org.springframework              
     Artifact Id : spring-jdbc
     Version : 3.2.3.RELEASE

①  AOP : aspectj검색  --> aspectj , weaver 추가
②  JDBC : jdbc검색
③  myBatic : myBatis 검색
④  ojdbc : ojdbc로 검색  --> 14버전 추가    (현재는 사용못함)
=======================================================================
※ 스프링
스프링은 struts와 마찬가지로 오픈소스이다. 스프링을 사용하는 이유는 '필요한 인스턴스를 스프링에서 미리 생성해준다'
라는 장점을 얻을수 있기때문이다. 필요한 인스턴스를 생성하는 방법은 new를 사용하는 방법도 있지만, 
디자인패턴인 Factory패턴이나 JNDI(Java Naming and Directory Interface)를 이용하여 생성할수 도 있다

[1]스프링의 특징
   1. 어플리케이션 프레임워크로 불리며,웹 어플리케이션은 물론, 
      콘솔어플리케이션이나 스윙과 같은 GUI 어플리케이션등 
      어떤 어플리케이션에도 적용 가능한 프레임워크이다
   2. 스프링은 EJB와 같이 복잡한 순서를 거치지 않아도 간단하게
      이용할수 있기 때문에 '경량(Lightweight)컨테이너'라고도 부른다
   3. 스프링은 Dependency Injection(DI)과 Aspect Oreited Programming(AOP)을
      가장 중점적인 기술로 사용되지만, 이외에도 여러가지 기능을 제공하고 있다.
   4. 스프링은 자주변경이 되거나 컴포넌트의 재활용이 높은 유연한 어플리케이션에
      작성할수 있다는 장점을 가지고 있다

[2] 스프링의 7가지 모듈
   1. Spring Core (core container)
       Spring 프레임워크의 핵심 기능을 제공한다. 코어 컨테이너의 주요 컴포넌트는 Bean-Factory(Factory 패턴의 구현)이다. 
       BeanFactory는 Inversion of Control (IoC) 패턴을 사용하여 애플리케이션의 설정 / 의존성 스팩을 실제 애플리케이션 코드에서 분리시킨다.
       Spring Core 바로위에 있으면서 Spring Core에서 지원하는 기능 외에 추가적인 기능들과 좀 더 쉬운 개발이 가능하도록 지원하고 있다. 
      - 유저 인터페이스 및 타당성 검증이라는 어플리케이션의 기반 성능,JNDI 및 EJB의 지원,  메일 송.수신 기능 등을 지원한다.

   2. Spring Context
       Spring을 컨테이너로 만든 것이 핵심 모듈의 BeanFactory라면, Spring을 프레임워크로 만든 것은 컨텍스트 모듈이다.
       이 모듈은 국제화된 메시지, 애플리케이션 생명주기 이벤트, 유효성 검증 등을 지원함으로써 BeanFactory의 개념을 확장한다.
       이 모듈은 이메일, JNDI 접근, EJB 연계, 리모팅, 스케쥴링 등과 같은 다수의 엔터프라이즈 서비스를 추가로 제공한다. 또한 템플릿 프레임워크와의 통합도 지원한다.

   3. Spring AOP 모듈(Spring AOP)
       설정 관리 기능을 통해 aspect 지향 프로그래밍 기능을 Spring 프레임워크와 직접 통합시킨다.
       따라서 Spring 프레임워크에서 관리되는 모든 객체에서 AOP가 가능하다.
       Spring AOP 모듈은 Spring 기반 애플리케이션에서 객체에 트랜잭션 관리 서비스를 제공한다.
       Spring AOP에서는 EJB 컴포넌트에 의존하지 않고도 선언적 트랜잭션 관리를 애플리케이션과 결합할 수 있다.

   4. Spring DAO(Data Access Object)
      Spring JDBC DAO 추상 레이어는 다른 데이터베이스 벤더들의 예외 핸들링과 오류 메시지를 관리하는 중요한 예외 계층을 제공한다.
     이 예외 계층은 오류 핸들링을 간소화하고, 예외 코드의 양도 줄여준다.
     Spring DAO의 JDBC 예외는 일반 DAO 예외 계층에 순응한다.
     JDBC에 의한 데이터베이스 액세스를 지원하고 트렌젝션 관리의 기반이 된다

  5. Spring ORM
     프레임워크는 여러 ORM(Object/Relation Mapping) 프레임워크에 플러그인 되어, Object Relational 툴 (JDO, Hibernate, iBatis SQL Map)을 제공한다. 
     이 모든 것은 Spring의 일반 트랜잭션과 DAO 예외 계층에 순응한다.

  6.  Spring Web module
      웹 컨텍스트 모듈은 애플리케이션 컨텍스트 모듈의 상단에 구현되어, 웹 기반 애플리케이션에 컨텍스트를 제공한다.
      Spring 프레임워크는 Jakarta Struts와의 통합을 지원한다.
      웹 모듈은 다중 요청을 핸들링하고, 요청 매개변수를 도메인 객체로 바인딩하는 작업을 수월하게 한다.

  7. Spring MVC framework
     MVC 프레임워크는 완전한 기능을 갖춘 MVC 구현이다. MVC 프레임워크는 전략 인터페이스를 통해 설정할 수 있으며, 
     JSP, Velocity, Tiles, iText, POI 같은 다양한 뷰 기술을 허용한다.

[3]DI(Dependency Injection)
   : 객체간의 결합을 느슨하게 하는 스프링의 핵심 기술이다
     
     객체사이의 의존관계를 자기자신이 아닌 외부에 의해서 설정된다는 개념이다
     DI컨테이너는 어떤 클래스가 필요로 하는 인스턴스를 자동으로 생성,취득하여 
     연결시켜주는 역할을 한다

   ※스프링 설정파일 
     (1) BeanFactory인터페이스
         Object getBean() : 인수에 지덩된 이름의 Bean인스턴스를 생성해서 반환    
         boolean containsBean(String name) : 인수에 지정된 이름의 Bean이 정의 되어 있는지 여부를 반환
         String []getAliases(String name) : Bean이름에 알리아스가 정의 되어 있는 경우, 그 알리아스를 반환한다
    (2) bean요소의 설정
        id : 식별자(고유값)
        name : id에 대한 별칠,복수정의 가능
        class : Bean클래스 이름, 완전한 쳥태의 클래스이름을 기술한다
        parent : Bean정의를 상속하는 경우 지저안 새로운 Bean의 id
        abstract : Bean클래스가 추상 클래스인지 여부
        singleton : Bean이 싱글톤을 관리하는지 여부
        lazy-init : Bean의 로딩을 지연시킬지 여부
        autowire : 오토와이즈여부
        dependency-check : 의존관꼐확인  방법
        depends-on : 이 Bean이 의존할 Bean이름, 먼저 최기화 되는 것이 보장된다
        init-method : Bean초기화시 실행시킬 메서드
        destroy-method : Bean컨테이너 종료시 실행시킬 메서드
        scope : 객체생성을 어떻게 할지 여부
        ex)
        <bean... scope="singleton">
          - 객체를 한번만 생성하고, 그 후부터는 이미 생성된 객체를 재활용
          - 객체 생성 시점 : ApplicationContext context = new ClassPathXmlApplicationContext("xml파일"); 할 때 객체를 공유

       <bean... scope="prototype">
         - 객체를 매번 new instance를 생성해서 반환함
         - 객체 생성 시점 : Object obj = (Object) context.getBean() 시 매번 생성.

       other scopes : (web관련 scope)
          - scope="request" 
          - scope="session"
          - scope="globalSession"
        
      factory-method : 속성값으로 static method를 지정해서 해당 method를 이용하여 빈을 생성하도록 설정


   ※의존관계를 관리하기위한 방법
   1. Construction Injection : 생성자를 통해서 의존관계를 연결시키는것을 말함
   2. Seter Injection : 클래스 사이의 의존관계를 연결시키기 위해서 setter메소드를
      이용하는 방법을 말함 

       ※ApplicationContext.xml	
	(1) constuctor-arg요소속성	
	-------------------------------------------------------------------
	속성                   설     명
	-------------------------------------------------------------------
	index   constructor의 몇번째의 인수에 값을 전달할 것인지 지정
	type    constructor의 어느 데이터형의 인수에 값을 전달할 것인지 지정
	ref     자식요소<ref bean="빈이름"/>대신에 사용할수 있다
	value   자식요소 <value>값</value> 대신에 사용할수 있다
	-------------------------------------------------------------------

	(2) property요소의 속성
	-------------------------------------------------------------------
	속성                   설     명
	-------------------------------------------------------------------
	ref     자식요소<ref bean="빈이름"/>대신에 사용할수 있다      
	value   자식요소 <value>값</value> 대신에 사용할수 있다
	-------------------------------------------------------------------

[4]AOP(Aspect Oreiented Programming)
   절차적 프로그래밍에서는 분리된 관점을 프로시저로 구성하고,OOP에서는 이를 클래스로 작성한다
   여기서 AOP는 OOP를 적용해도 분리해 낼수 없는 부분이 있다는 문제가 있다
   소프트웨어 공학에서 관점(Concern)이라는 단어는 에스펙트(Aspect)지향 이전에 존재했다

   (1) AOP 개념 및 정의
        하나의 어플리케이션을 만들기위해 공통으로 필요하는게 있다. 로깅,트랜잭션,보안 이런것들이 전반적으로 필요하다. 
        만약에 이런것들을 extends(상속)으로 구현하기에는 한계가 있다.  
        이런 한계를 극복하기위해 AOP(Aspect Oriented Programming)기법이 필요하다
        스프링의 DI가 클래스간의 관계에서 결합도를 낮추는데 있다면, AOP는 공통관심사의 분리에 있다. 
        쉽게 말해 클래스들이 공통으로 갖는 기능이나 절차,서비스등을 한데 묶어 따로 빼내갰다는 취지이다. 
   
    (2) AOP 특장점
         1) aop라이브러리(spring-aop.jar)가 공통기능을 아주 알맞게 삽입해준다. 
         2) 핵심 로직을 구현할때 트랜잭션 적용이나 로깅,보안검사코드를 따로 삽입할 필요가 없다. 
         3) 전체 코드 기반에 흩어져 있는 관심사항이 하나의 장소로 응집된다 
         4) 서비스 모듈이 자신의 주요 관심사항(또는 핵심 기능)에 대한 코드만 포함하고 
            그 외의 관심사항은 모두 애스펙트로 옮겨지므로 코드가 깔끔해진다 

     (3) AOP 용어
        Joinpoint : Advice를 적용 가능한 지점을 의미한다.메서드호출, 필드값 변경등이 Joinpoint에 해당한다 
                     '클래스의 이스턴스 생성시점','메소드 호출시점' 및 '예외발생시점'과 같이 어플리케이션을 
	       실행할때 특정 작업이 시작되는 시점을  '조인포인트'라 한다 
       Advice    : 조인포인트에 삽입되어져 동작할수 있는 코드를 '어드바이스'라 한다
                    언제 공통 관심기능을 핵심로직에 적용할지를 정의 하고 있다
                    예를 들어 '메서드를 호출하기전'(언제)에 '트렌젝션을 시작한다'(공통기능) 기능을 
	       적용한다는 것을 정의하고 있다 
       Pointcut  :여러개의 조인포인트를 하나로 결합한(묶은)것을 '포인트컷'이라고 부른다
                     Joinpoint의 부분집합으로써 실제로 Advice가 적용되는 Joinpoint를 나타낸다
                     스프링에서는 정규표현식이나 Aspect의 문법을 이용하여 Pointcut을 정의 할수 있다
       Advisor   : 어드바이스와 포이트컷을 하나로 묶어 취급한 것을 '어드바이저'라 부른다
       Weaving   : Advice를 핵심코드로직에적용하는 것을 Weaving이라고 한다
                       공통코드를 핵심로직코드에 삽입하는 것을 Weaving이라고 한다
       Target    : 핵심 로직을 구현하는 클래스를 말한다
       Aspect    : 여러객체에 공통적으로 적용되는 공통관심사항을 Aspect라고 한다.
                     트렌젝션이나 보안등이 Aspect의 좋은 예이다

   (4) AOP표현식
         ※ AspectJ표현식에서 사용되는 와일드 카드
         * :  *는 마침표를 제외한 문자가 0개 이상 나열된것을 의미한다
         .. :  ..은 마침표를 포함한 문자가 0개 이상 나열된것을 의미한다
         + : +는 주어진 타입의 임의의 서브 클래스나 서브 인터페이스를 의미한다

         ※ 포인트컷 지정시 사용되는 연산자
          ! : 표시된 조인 포인트를 제외한 모든 조인 포인트를 지정할때 사용된다
         &&: 두조건을 모두 만족시키는 조인포인트를 지정할때 사용된다
         || : 주조건중 하나만 만족하는 조인 포인트를 지정할때 사용한다

         ※ 매핑의기본
         get*(..) : get으로 시작하는 모든 메서드를 지정한다
                    ex) getUser(),   getUserList(),  get()
                         getUser(UserVo vo),  getUserList(UserVo vo, int num)
          *get*(..) : 리턴타입이 *이면 어떤 타입이 오더라도 상관없다
                    ex) void  getUser(),   int getUser(),  UserVo  getUser()

         ※ 클래스지정
          com.elitebiz.* : *를 이용하면 특정패키지의 모든 클래스를 지정할수 있다
                              com.elite.biz 패키지의 모든 클래스를 지정한다
          com.elite..* :  com.elite패키지 및 그 서브 패키지의 모든 클래스를 지정한다
          UserService+ : +는 서브타입을 표현할때 사용한다
                              UserService클래스 혹은 UserService인터페이스로 부터 파생된 모든 
                             서브클래스를 지정한다
         !UserService : !은 논리부정 조건을 의미한다
                           UserService클래스 혹은 UserService인터페이스로 부터 파생되지 않은
                           모든 서브클래스를 지정한다
        int || Integer : || 연산자는 or 연산을 표현함으로 int타입으로 표현되거나 Integer 타입으로 
                           표현되는 요소를 지칭한다
 
         ※ 매개변수 지정
          * addUser(..) : 매개변수의 개수와 타입이 뭐가 오든 상관없이 처리한다
          * addUser(*) : 반드시 1개의 임의의 매개변수가 선언되어야 한다
          * addUser(*, ..) : 최소 1개의 매개변수가 선언되어야 하며, 이후 다른 매개변수가 있어도 되고
                               없어도 된다
                               ex) addUser(UserVo vo) ,    addUser(String id, String pwd, int no)

         ※ 생성자 지정
             new(..) : new는 메서드의 이름을 지정하는게 아니라 생성자를 지정한다
                        매개변수 상관없이 생성자를 지정한다
             UserServiceImpl.new(..) : UserServiceImple클래스의 new메서드가 아니라  
                                             UserServiceImple클래스의 생성자를 지정한다
     

   (5) AOP구현하는과정
       1) Advice클래스를 작성한다
       2) 설정파일에  Pointcut을 설정한다
       3) 설정파일에 Advice와 Pointcut을 묶어 놓는 Advisor를 설정한다
       4) 설정파일에 ProxcyFactoryBean클래스를 이용하여 대상 객체에 Advisor를 적용한다
       5) getBean()메소드로 빈 객체를 가져와 사용한다

[5]스프링과 JDBC

    1) 데이타베이스와 연결 ------  1) DataSource

               ↓                                        ↓

    2) 쿼리문을 실행       ------  2) JdbcTemplate    

              ↓                                     ↓              

    3) 결과를 얻어옴       ------  3) RowMapper 


     [라이브러리 필요]
     C:/Program Files/Java/jdk1.7.0_45/jre/lib/ext/ojdbc14.jar에 복사
   
1.  JDBC Template API사용
     1) queryForInt()  :  SELECT문 실행 결과로 리턴되는 하나의 정수 값을 리턴 받기 위해서 JdbcTemplate클래스의 메서드
                             ex) int count = getJdbcTemplate().queryForInt("SELECT COUNT(*) FROM USERS");

     2) queryForObject() : SQL수행 결과를 Object로 리턴하는 경우에 이용된다
                            ex) String name = getJdbcTemplate().queryForObject(
                                            "SELECT NAME FROM USER WHERE ID=?, new Object[]{"test"}, String.class);
     3) query() : SELECT문의 실행결과가 여러목록으로 리턴되는 경우에 사용되는 메서드이다
                     ex) Object []args = {"%" + searchKeyword + "%"};
                          ArrayList list = getJdbcTemplate().query("SELECT * FROM USERS WHERE USER_NAME LIKE  ?", args,
                                              new UserRowMapper());
     4) RowMapper이용 : SELECT문을 수행하는 결과값을 단순하게 정수값이나 문자열로 받지 않고 VO(Value Object)객체에 담아야
                                하는경우가 있다. 이 경우 VO 객체에 DB에서 SELECT하데이터가 어떻게 매핑되어야 하는지에 대한 정의가
                                필요하다 이 매핑과 관련돈 설정을 위해 제공되는 것이 RowMapper인터페이스 이다 
     5) update() : INSERT, DELETE, UPDATE SQL문을 수행하기 위해 사용되는 메서드 이다.
                       getJdbcTemplate().update("INSERT INTO USER VALUES(?,?,?)",  new Object[]{ name, age, phone} );
[6] MVC
	
1. 장점 
    1) 스프링MVC프레임워크는 스프링 기반으로 사용할수 있다
    2) 스프링이 제공하는 트렌젝션처리가 DI및 AOP적용등을 손쉽게 사용할수 있다
    3) 스트럿츠와 같은 프레임워크와 스프링프레임워크를 연동하기 위해 추가적인 설정을 하지 않아도 된다

2. 스프링MVC주요구성요소

  구성요소                                      설        명
----------------------------------------------------------------------------------------------------------
DispatcherServlet          클라이언트의 요청을 전달 받는다.컨트롤러에게 클라이언트의 요청을 전달하고
			   컨트롤러가 리턴한 결과값을 View에 전달하여 알맞은 응답을 생성하도록한다
                           ( 웹브라우저로부터 송신된 Request를 일괄적으로 관리한다)
HandlerMapping             클라이언트의 요청URL을 어떤 컨트롤러가 처리할지를 결정한다
                           RequestURL과 Controller 클래스의 맵핑을 관리한다.
                           즉, DispatcherServlet에서 바로 Controller로 보내는게 아니라 handlerMapping을
                           통해 Requesturl을 구분해서 Controller로 전달한다.)
controller                 클라이언트의 요청을 처리한뒤, 그결과를 DispatcherServlet에 알려준다 
(컨트롤러)                 스트럿츠의 Action과 동일한 역할을 수행한다
                           비즈니스 로직을 호출하여 처리 결과 ModelAndView 인스턴스를 반환한다
ModelAndView               컨트롤러가 처리한 결과 정보및 뷰 선택에 필요한 정보를 담는다
ViewResolver               컨트롤러의 처리결과를 생성할 뷰를 결정한다
                           Controller 클래스로부터 반환된 View 정보가 논리적인 View이름일 경우에는
                           bean설정 파일에 정의되어 있는 ViewResolver 클래스를 이용하여 클라이언트에게 출력할 
                           View 객체를 얻게된다.
View(뷰)                   컨트롤러의 처리결과 화면을 생성한다
-------------------------------------------------------------------------------------------------------------

3. 웹어플리케이션을 개발하는 5단계
    1) 클라이언트의 요펑을 받을 DispatcherServlet을 web.xml에 설정한다
    2) Handlermapping을 이용하여 요청URL과 컨트롤러를 작성한다
    3) 클라이언트의 요청을 처리할 컨트롤러릏 작성한다
    4) 어떤뷰를 이용하여 컨트롤러의 처리결과 응답화면을 생성할지 결정하는 ViewResolver를 설정한다
    5) JSP나 Velocity등을 이용하여 뷰영역의 코드를 작성한다

[7] 하이버네이트와 연동, 트렌젝션처리
    http://www.hibernate.org  
    hibernate-distribution-3.3.0.CR1-dist.zip다운로드 (hibernate3.jar)
